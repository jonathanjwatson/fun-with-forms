{"version":3,"sources":["components/Input.jsx","components/Button.jsx","containers/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","className","htmlFor","name","label","type","placeholder","id","value","onChange","handleInputChange","Button","buttonType","onClick","e","handleClick","handleButtonClick","text","Home","state","email","password","firstName","lastName","event","target","setState","handleSubmit","preventDefault","alert","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPA4BeA,G,MAzBD,SAACC,GACb,OACE,yBAAKC,UAAU,cACb,2BAAOC,QAASF,EAAMG,MAAOH,EAAMI,OACnC,2BACEC,KAAML,EAAMK,KACZJ,UAAU,eACVK,YAAaN,EAAMI,MACnBG,GAAIP,EAAMG,KACVA,KAAMH,EAAMG,KACZK,MAAOR,EAAMQ,MACbC,SAAUT,EAAMU,uBCcTC,EAzBA,SAACX,GACd,IAAMY,EAAaZ,EAAMK,KAAOL,EAAMK,KAAO,UAM7C,OACE,4BACEJ,UAAS,kBAAaW,GACtBC,QAAS,SAACC,IARY,SAACA,GACrBd,EAAMe,aACRf,EAAMe,YAAYD,GAOhBE,CAAkBF,KAGnBd,EAAMiB,OC4EEC,E,4MAvFbC,MAAQ,CACNC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,SAAU,I,EAGZb,kBAAoB,SAACc,GAAU,MAGLA,EAAMC,OAAtBtB,EAHqB,EAGrBA,KAAMK,EAHe,EAGfA,MACd,EAAKkB,SAAL,eACGvB,EAAOK,K,EAIZmB,aAAe,SAACH,GACdA,EAAMI,iBACNC,MAAM,YAAD,OACS,EAAKV,MAAMG,UADpB,YACiC,EAAKH,MAAMI,SAD5C,8DAC0G,EAAKJ,MAAMC,S,uDAK1H,OACE,yBAAKnB,UAAU,YAAYM,GAAG,QAC5B,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,cAAcM,GAAG,WAA/B,uBACuB,KAEvB,8BACE,kBAAC,EAAD,CACEJ,KAAK,YACLK,MAAOsB,KAAKX,MAAMG,UAClBZ,kBAAmBoB,KAAKpB,kBACxBL,KAAK,OACLD,MAAM,eAER,kBAAC,EAAD,CACED,KAAK,WACLK,MAAOsB,KAAKX,MAAMI,SAClBb,kBAAmBoB,KAAKpB,kBACxBL,KAAK,OACLD,MAAM,cAER,kBAAC,EAAD,CACED,KAAK,QACLK,MAAOsB,KAAKX,MAAMC,MAClBV,kBAAmBoB,KAAKpB,kBACxBL,KAAK,QACLD,MAAM,kBAER,kBAAC,EAAD,CACED,KAAK,WACLK,MAAOsB,KAAKX,MAAME,SAClBX,kBAAmBoB,KAAKpB,kBACxBL,KAAK,WACLD,MAAM,aAcR,yBAAKH,UAAU,eACb,kBAAC,EAAD,CACEgB,KAAK,iBACLZ,KAAK,SACLU,YAAae,KAAKH,wB,GA7EjBI,aCOJC,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.37e7144c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Input = (props) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={props.name}>{props.label}</label>\n      <input\n        type={props.type}\n        className=\"form-control\"\n        placeholder={props.label}\n        id={props.name}\n        name={props.name}\n        value={props.value}\n        onChange={props.handleInputChange}\n      />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Button = (props) => {\n  const buttonType = props.type ? props.type : \"primary\";\n  const handleButtonClick = (e) => {\n    if (props.handleClick) {\n      props.handleClick(e);\n    }\n  };\n  return (\n    <button\n      className={`btn btn-${buttonType}`}\n      onClick={(e) => {\n        handleButtonClick(e);\n      }}\n    >\n      {props.text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport \"./Home.css\";\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\n\nclass Home extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  };\n\n  handleInputChange = (event) => {\n    // console.log(event.target.name);\n    // console.log(event.target.value);\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\n      `Welcome, ${this.state.firstName} ${this.state.lastName}! We have created your account with email address: ${this.state.email}`\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"container\" id=\"home\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1 className=\"text-center\" id=\"heading\">\n              This is my homepage.{\" \"}\n            </h1>\n            <form>\n              <Input\n                name=\"firstName\"\n                value={this.state.firstName}\n                handleInputChange={this.handleInputChange}\n                type=\"text\"\n                label=\"First name\"\n              />\n              <Input\n                name=\"lastName\"\n                value={this.state.lastName}\n                handleInputChange={this.handleInputChange}\n                type=\"text\"\n                label=\"Last name\"\n              />\n              <Input\n                name=\"email\"\n                value={this.state.email}\n                handleInputChange={this.handleInputChange}\n                type=\"email\"\n                label=\"Email address\"\n              />\n              <Input\n                name=\"password\"\n                value={this.state.password}\n                handleInputChange={this.handleInputChange}\n                type=\"password\"\n                label=\"Password\"\n              />\n              {/* <div className=\"form-group\">\n                <label htmlFor=\"firstName\">First Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"First name\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  value={this.state.firstName}\n                  onChange={this.handleInputChange}\n                />\n              </div> */}\n              <div className=\"text-center\">\n                <Button\n                  text=\"Create Account\"\n                  type=\"danger\"\n                  handleClick={this.handleSubmit}\n                ></Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./containers/Home/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}